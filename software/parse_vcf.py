#!/usr/bin/python3

# Usage: python3 parse_vcf.py <vcf_file> <length>
# This script parses a VCF file and extracts specific fields into a tab-separated format.
# It is designed to work with VCF files generated by snippy and assumes a specific column order.
# The script takes two command line arguments:
# 1. The VCF file to be parsed. 
# 2. The length of the sequence (this is not used in the script but is included for compatibility with other scripts).
# The output is printed to the console in a tab-separated format.

# Import necessary libraries
from sys import argv
from argparse import ArgumentParser
# Check if the correct number of arguments is provided
if len(argv) != 3:
    print("Usage: python3 parse_vcf.py <vcf_file> <length>")
    exit(1)

# parse command line arguments
parser = ArgumentParser(description="Parse a VCF file and extract specific fields.")
parser.add_argument("-i","--inputfile", help="The VCF file to be parsed.")
parser.add_argument("-l","--length", help="The length of the sequence.")
args = parser.parse_args()
# Assign command line arguments to variables
file = args.inputfile
length = args.length

# Define the order of columns to be extracted from the VCF file
order = [
    "gene",
    "seq",
    "len",
    "POS",
    "REF",
    "ALT",
    "reference",
    "snippy",
    "pc",
    "pc_c",
    "pc_t",
    "pc_ts",
    "pc_h",
    "pc_f",
    "pr",
    "pr_c",
    "pr_t",
    "pr_ts",
    "pr_h",
    "pr_f",
    "prf",
    "prf_c",
    "prf_t",
    "prf_ts",
    "prf_h",
    "prf_f",
    "rf",
    "rf_c",
    "rf_t",
    "rf_ts",
    "rf_h",
    "rf_f",
]

df = {
    "gene": "",
    "seq": "",
    "len": "",
    "POS": "",
    "REF": "",
    "ALT": "",
    "reference": "",
    "snippy": "",
    "pc": "",
    "pc_c": "",
    "pc_t": "",
    "pc_ts": "",
    "pc_h": "",
    "pc_f": "",
    "pr": "",
    "pr_c": "",
    "pr_t": "",
    "pr_ts": "",
    "pr_h": "",
    "pr_f": "",
    "prf": "",
    "prf_c": "",
    "prf_t": "",
    "prf_ts": "",
    "prf_h": "",
    "prf_f": "",
    "rf": "",
    "rf_c": "",
    "rf_t": "",
    "rf_ts": "",
    "rf_h": "",
    "rf_f": "",
}


with open(file, "r") as f:
    lines = [line for line in f.readlines() if not line.startswith("##")]

header = lines[0].split()

indexes = {}

indexes["POS"] = 1
indexes["REF"] = 3
indexes["ALT"] = 4
indexes["reference"] = 9
indexes["snippy"] = 10

for col in order:
    for i,field in enumerate(header):
        if i <= 10:
            continue
        elif field.endswith(col) and i not in indexes.values():
            indexes[col] = i

for line in lines[1:]:
    fields = line.split()
    newline = df.copy()
    newline["gene"] = file.split("@")[0].split("/")[2]
    newline["seq"] = file.split("@")[1].replace(".vcf","")
    newline["len"] = length

    for col,index in indexes.items():
        newline[col] = fields[index]

    result = [newline[x] for x in order]
    print("\t".join(result))


